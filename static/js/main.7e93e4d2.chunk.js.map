{"version":3,"sources":["useInput.js","App.js","index.js"],"names":["useInput","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onChange","event","target","Log","props","react_default","a","createElement","index_es","component","className","id","messages","map","item","index","Message","key","uuid","text","App","defaultChannel","params","window","location","search","substring","split","i","length","pair","decodeURI","channel","setChannel","_useState3","_useState4","setMessages","_useState5","Date","getTime","join","username","tempChannel","tempMessage","handleKeyDown","publishMessage","newChannel","trim","newURL","origin","history","pushState","messageObject","PubNub","publishKey","subscribeKey","publish","message","updateScroll","element","document","getElementById","scrollTop","scrollHeight","goBack","query","useEffect","console","log","pubnub","addListener","status","statusEvent","category","msg","newMessages","push","concat","subscribe","channels","count","stringifiedTimeToken","response","entry","unsubscribeAll","addEventListener","removeEventListener","variant","inline","style","width","onKeyDown","placeholder","fullWidth","inputProps","aria-label","autoFocus","size","color","onClick","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.7e93e4d2.chunk.js","sourcesContent":["import { useState } from 'react';\n\nfunction useInput()\n{\n  let [value, setValue] = useState('');\n  let onChange = function(event){\n    setValue(event.target.value);\n  };\n  return {\n    value,\n    setValue,\n    onChange\n  };\n}\n\nexport default useInput;\n","//These are the two hooks we use the most of through this Chat\nimport React, { useState, useEffect} from 'react';\n\n//has a few css stylings that we need.\nimport './App.css';\n\n//This is a hook I created to reduce some of the bloat we get with watching inputs for changes.\nimport useInput from './useInput.js';\n\n//Lets us import PubNub for our chat infrastructure capabailites.\nimport PubNub from 'pubnub';\n\n//Material UI Components\nimport {Card, CardActions, CardContent,List, ListItem,Button,Typography,Input} from '@material-ui/core';\n\n// Our main Component, the parent to all the others, the one to rule them all.\nfunction App(){\n  //Set a default channel incase someone navigates to the base url without\n  //specificfying a channel name parameter.\n  let defaultChannel = \"Global\";\n  //Access the parameters provided in the URL\n  let query = window.location.search.substring(1);\n  let params = query.split(\"&\");\n  for(let i = 0; i < params.length;i++){\n    var pair = params[i].split(\"=\");\n    //If the user input a channel then the default channel is now set\n    //If not, we still navigate to the default channel.\n    if(pair[0] === \"channel\" && pair[1] !== \"\"){\n      defaultChannel = decodeURI(pair[1]);\n    }\n  }\n\n  //Set the states using useState hook,\n  //We have our messages, a message adding buffer, our channel,the username, and\n  //temp channel and message using the useInput hook. We access what the\n  //user is currently typing with those hooks.\n  const [channel,setChannel] = useState(defaultChannel);\n  const [messages,setMessages] = useState([]);\n  const [username,] = useState(['user', new Date().getTime()].join('-'));\n  const tempChannel = useInput();\n  const tempMessage = useInput();\n  //This is where we set up PubNub and handle events that come through. Reruns on channel name update!\n  useEffect(()=>{\n    console.log(\"setting up pubnub\");\n    const pubnub = new PubNub({\n      publishKey: \"pub-c-d62180cb-302f-4c84-b05d-6975d2e5634a\",\n      subscribeKey: \"sub-c-081cd550-75d2-11e9-a9da-06324c5f6dce\",\n      uuid: username\n    });\n\n\n    pubnub.addListener({\n     status: function(statusEvent) {\n       if (statusEvent.category === \"PNConnectedCategory\") {\n         console.log(\"Connected to PubNub!\")\n       }\n     },\n     message: function(msg) {\n       if(msg.message.text){\n         console.log(msg.message.text)\n         let newMessages = [];\n         newMessages.push({\n           uuid:msg.message.uuid,\n           text: msg.message.text\n         });\n         setMessages(messages=>messages.concat(newMessages))\n         updateScroll()\n       }\n     }\n   });\n     //Subscribes to the channel in our state\n     pubnub.subscribe({\n         channels: [channel]\n     });\n     pubnub.history(\n     {\n         channel: channel,\n         count: 10, // 100 is the default\n         stringifiedTimeToken: true // false is the default\n     }, function (status, response){\n        let newMessages = [];\n         for (let i  = 0; i < response.messages.length;i++){\n           newMessages.push({\n             uuid:response.messages[i].entry.uuid ,\n             text: response.messages[i].entry.text\n           });\n         }\n         setMessages(messages=>messages.concat(newMessages));\n         updateScroll()\n       }\n     );\n    return function cleanup(){\n      console.log(\"shutting down pubnub\");\n      pubnub.unsubscribeAll();\n      setMessages([]);\n    }\n  },[channel, username]);\n  //Adding back browser button listener\n  useEffect(() => {\n    window.addEventListener(\"popstate\",goBack);\n\n    return function cleanup(){\n      window.removeEventListener(\"popstate\",goBack);\n    }\n  },[]);\n\n  function handleKeyDown(event){\n    if(event.target.id === \"messageInput\"){\n      if (event.key === 'Enter') {\n        publishMessage();\n      }\n    }else if(event.target.id === \"channelInput\"){\n      if (event.key === 'Enter') {\n        //Navigates to new channels\n        const newChannel = tempChannel.value.trim();\n        if(newChannel){\n          if(channel !== newChannel){\n            //If the user isnt trying to navigate to the same channel theyre on\n            setChannel(newChannel);\n            let newURL = window.location.origin + \"/ReactHooksChat.PubNub/?channel=\" + newChannel;\n            window.history.pushState(null, '',newURL);\n            tempChannel.setValue('');\n          }\n        }else{\n          //If the user didnt put anything into the channel Input\n          if(channel !== \"Global\"){\n            //If the user isnt trying to navigate to the same channel theyre on\n            setChannel(\"Global\");\n            let newURL = window.location.origin + \"/ReactHooksChat.PubNub/\";\n            window.history.pushState(null, '',newURL);\n            tempChannel.setValue('');\n          }\n        }\n      }\n    }\n\n  }\n\n  //Publishing messages via PubNub\n  function publishMessage(){\n   if (tempMessage.value) {\n     let messageObject = {\n       text: tempMessage.value,\n       uuid: username\n     };\n\n     const pubnub = new PubNub({\n       publishKey: \"pub-c-d62180cb-302f-4c84-b05d-6975d2e5634a\",\n       subscribeKey: \"sub-c-081cd550-75d2-11e9-a9da-06324c5f6dce\",\n       uuid: username\n     });\n     pubnub.publish({\n       message: messageObject,\n       channel: channel\n     });\n     tempMessage.setValue('');\n   }\n }\n  function updateScroll(){\n    var element = document.getElementById(\"list\");\n    element.scrollTop = element.scrollHeight;\n  }\n  function goBack() {\n    //Access the parameters provided in the URL\n    let query = window.location.search.substring(1);\n    if(!query){\n      setChannel(\"Global\")\n    }else{\n      let params = query.split(\"&\");\n      for(let i = 0; i < params.length;i++){\n        var pair = params[i].split(\"=\");\n        //If the user input a channel then the default channel is now set\n        //If not, we still navigate to the default channel.\n        if(pair[0] === \"channel\" && pair[1] !== \"\"){\n            setChannel(decodeURI(pair[1]))\n        }\n      }\n    }\n  }\n\n  //This returns how our page will look, including a couple\n  // components into the heirarchy to help organize our page. We can also pass information down\n  //to our children through props.\n    return(\n      <Card >\n          <CardContent>\n            <div className=\"top\">\n              <Typography variant=\"h4\" inline >\n                PubNub React Chat\n                </Typography>\n              <Input\n                style={{width:'100px'}}\n                className=\"channel\"\n                id=\"channelInput\"\n                onKeyDown={handleKeyDown}\n                placeholder ={channel}\n                onChange = {tempChannel.onChange}\n                value={tempChannel.value}\n              />\n            </div>\n            <div >\n              <Log messages={messages}/>\n            </div>\n          </CardContent>\n          <CardActions>\n            <Input\n              placeholder=\"Enter a message\"\n              fullWidth={true}\n              id=\"messageInput\"\n              value={tempMessage.value}\n              onChange={tempMessage.onChange}\n              onKeyDown={handleKeyDown}\n              inputProps={{'aria-label': 'Message Field',}}\n              autoFocus={true}\n            />\n            <Button\n              size=\"small\"\n              color=\"primary\"\n              onClick={publishMessage}\n              >\n              Submit\n            </Button>\n          </CardActions>\n        </Card>\n      );\n}\n\n//Log functional component that is the list of messages\nfunction Log(props) {\n\n  return(\n    <List component=\"nav\" className=\"log\" id=\"list\">\n      <ListItem>\n      <Typography component=\"div\" >\n        { props.messages.map((item, index)=>(\n          <Message key={index} uuid={item.uuid} text={item.text}/>\n        )) }\n      </Typography>\n      </ListItem>\n    </List>\n  )\n};\n\n//Our message functional component that formats each message.\nfunction Message(props){\n  return (\n    <div >\n      { props.uuid }: { props.text }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}